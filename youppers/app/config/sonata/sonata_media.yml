#
# more information can be found here http://sonata-project.org/bundles/media
#
sonata_media:
    db_driver:       doctrine_orm # | doctrine_mongodb
    default_context: default
    resizer:
        square:
            mode: outbound # inset
    contexts:
        default:  # the default context is mandatory
            download:
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file
                - sonata.media.provider.vimeo

            formats:
                abstract: { width: 100, quality: 100}
                wide:     { width: 820, quality: 100}
                small: { width: 100, quality: 100}
                big:   { width: 970 , quality: 100}

        youppers_apk:
            download:
                strategy: sonata.media.security.public_strategy
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.apk

            formats:
                default:

        pdf:
            download:
                mode: http # X-Sendfile | http
            providers:
                - youppers.common.provider.pdf

            formats:
                default:
                                
        youppers_company_logo:
            providers:
                - sonata.media.provider.image

            formats:
                show: { width: 200}
                list: { width: 80}

        youppers_brand_logo:
            providers:
                - sonata.media.provider.image

            formats:
                show: { width: 200}
                list: { width: 80}

        youppers_product:
            providers:
                - sonata.media.provider.image

            formats:
                show: { width: 200}
                list: { width: 80, height: 80}

        youppers_attribute:
            providers:
                - sonata.media.provider.image

            formats:
                show: { width: 200}
                list: { width: 80, height: 80}
                
        youppers_box:
            providers:
                - sonata.media.provider.image

            formats:
                show: { width: 220}
                list: { width: 80, height: 80}

        youppers_consultant_photo:
            providers:
                - sonata.media.provider.image

            formats:
                show: { width: 220}
                list: { width: 80, height: 80}
        
        #news:
        #    providers:
        #        - sonata.media.provider.image

        #    formats:
        #        abstract: { width: 100, quality: 100}
        #        wide:     { width: 820, quality: 100}

        #sonata_collection:
        #    providers:
        #      - sonata.media.provider.image

        #    formats:
        #        preview: { width: 100, quality: 100}
        #        wide:    { width: 820, quality: 100}

        #sonata_category:
        #    providers:
        #      - sonata.media.provider.image

        #    formats:
        #        preview: { width: 100, quality: 100}
        #        wide:    { width: 820, quality: 100}

        #sonata_product:
        #    providers:
        #        - sonata.media.provider.image

        #    formats:
        #        preview:   { width: 100, quality: 100}
        #        small:     { width: 300, quality: 100}
        #        large:     { width: 750, quality: 100}

    cdn:
        # define the public base url for the uploaded media
        server:
            path:      "%sonata_media.cdn.host%"

    filesystem:
        # define where the uploaded file will be stored
        local:
            directory:  "%kernel.root_dir%/../web/uploads/media"
            create:     true

    providers:
        # ...
        file:
            # the resizer must be set to false, otherwhise this can delete icon files from the fs
            resizer:    false
            allowed_extensions:
              - zip
              - pdf
              - apk
                     
#        pdf:
#            # the resizer must be set to false, otherwhise this can delete icon files from the fs
#            resizer:    false
#            
#            allowed_extensions:
#                - pdf
#            allowed_mime_types:
#                - "application/pdf"       
#                     
        image:
           thumbnail: sonata.media.thumbnail.format          # default value
           resizer: sonata.media.resizer.square
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#            thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        vimeo:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        youtube:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        dailymotion:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image

    pixlr:
        enabled:  false # true
        referrer: Youppers

#
# The LiipImagineBundle can be used if you want to convert on demand an image
# to a specific format. (ie a controller render the file)
#    more information can be found here : https://github.com/liip/LiipImagineBundle
#
#liip_imagine:
#    filter_sets:
#
#        # this configuration match the sonata_media configuration format definition
#        sonata_product_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_product_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [200, 100], mode: outbound }
#
#        sonata_product_large:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [600, 100], mode: outbound }
#
#        news_abstract:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        news_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        sonata_collection_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_collection_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        sonata_category_preview:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        sonata_category_wide:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 100], mode: outbound }
#
#        default_small:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [100, 100], mode: outbound }
#
#        default_big:
#            quality: 75
#            controller_action: 'SonataMediaBundle:Media:liipImagineFilter'
#            filters:
#                thumbnail: { size: [820, 70], mode: outbound }
    buzz:
      client:
        verify_peer: false
        
# Enable Doctrine to map the provided entities
doctrine:
    orm:
        entity_managers:
            default:
                mappings:
                    ApplicationSonataMediaBundle: ~
                    SonataMediaBundle: ~

services:
  sonata.media.provider.apk:
      class: %sonata.media.provider.file.class%
      arguments: ['sonata.media.provider.apk1', '@sonata.media.filesystem.local', '@sonata.media.cdn.server', '@sonata.media.generator.default' , '@sonata.media.thumbnail.format', ['apk'], ['application/vnd.android.package-archive', 'application/jar']]
      calls:
        - [ setTemplates, [ { helper_thumbnail: 'YouppersCommonBundle:Provider:thumbnail_apk.html.twig',  helper_view: 'SonataMediaBundle:Provider:view_file.html.twig'} ] ]
      tags:
          - { name: sonata.media.provider }
