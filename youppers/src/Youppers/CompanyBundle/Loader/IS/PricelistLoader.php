<?php
namespace Youppers\CompanyBundle\Loader\IS;

use Youppers\CompanyBundle\Entity\Brand;
use Youppers\CompanyBundle\Entity\Product;
use Youppers\CompanyBundle\Loader\AbstractPricelistLoader;
use Youppers\CompanyBundle\Loader\LoaderMapper;

class PricelistLoader extends AbstractPricelistLoader
{
	public function createMapper()
	{
		$mapping = array(
			'code' => 'Material Code',
			'brand' => function($row) { $matches=preg_split("/[\-\.]/",$row['CDS Italia']); if (array_key_exists(1,$matches)) return $matches[1]; },
			'name' => 'Description',
			'gtin' => 'EAN13',
			'price' => 'Price',
			self::FIELD_COLLECTION => function($row) { $matches=preg_split("/[\-\.]/",$row['CDS Italia'],4); if (array_key_exists(3,$matches)) return $matches[3]; },
			self::FIELD_TYPE => 'Gamma',
			'uom' => function($row) { return 'PCE'; }
		);
		$mapper = new LoaderMapper($mapping);
		return $mapper;
	}

	protected function guessProductCollection(Product $product, Brand $brand)
	{
		return parent::guessProductCollection($product, $brand); // TODO: Change the autogenerated stub
	}

	private $newCollectionProductType = array();

	/**
	 * @param Brand $brand
	 * @param $code collection code
	 * @return null|object
	 */
	protected function getNewCollectionProductType(Brand $brand, $code)
	{
		if (!array_key_exists($code,$this->newCollectionProductType)) {
			$this->newCollectionProductType[$code] = $this->getProductTypeManager()
				->findOneBy(array('name' => $this->mapper->get(self::FIELD_TYPE)));
			if (empty($this->newCollectionProductType[$code])) {
				$this->logger->error(sprintf("Product type '%s' not found",$this->mapper->get(self::FIELD_TYPE)));
				return null;
			}
		}
		return $this->newCollectionProductType[$code];
	}
	
}